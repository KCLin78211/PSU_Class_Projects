Introduction

This program is designed to identify hand written numbers (0 ~ 9) by neural network digit classification technique. Generally, this technique requires enourmous amuont of run time. For training process, it calculates 5 matrix multiplications, 2 matrix subtractions, and 5 elemnt-wise vector operations. For verification, it requires 2 matrix multiplications and 2 element-wise operations for sigmoid function. 

We decided to approach this problem by processing these operations in parallel on NVDIA's GPU processors. 



Explanation for each functions

setVectorSize:
This function sets the vector size and store them in struct, _vSize.

setMatrixSize:
This function sets the matrix size and store them in struct, _matrixSize.

VectorInitCUDA / MatrixInitCUDA:
This function allocates memory in GPU, and copy the value from local machine.

VectorAdditionKernel, VectorHadmardKernel, VectorDotProduct, VectorSigmoid, VectorSigmoidDerivative:
vector operations on GPU.

MatrixAddKernel, MatrixHadamardKernel, MatrixSigmoidMatrix, SigmoidDerivative:
Matrix operations on GPU


RunVectorKernel:
This function allocate and initialize memory in GPU and call functions for vector operations, VectorAdditionKernel, VectorHadmardKernel, VectorDotProduct, VectorSigmoid, VectorSigmoidDerivative functions. Then, it frees memory.


MatrixMultiplyCUBLAS:
This allocates and initialize memory in GPU and perform matirix multiplication by calling cublasSgemm, NVIDIA's code. Then, it frees memory.

RunMatrixKernel:
This function allocate and initialize memory in GPU and calls functions for matrix operations, MatrixAddKernel, MatrixHadamardKernel, MatrixSigmoidMatrix, and SigmoidDerivative. Then, it frees memory.

runTest:
This is a test function for other functions. 

main: 
It allocates memory for activation vectors, pre-sigmoid intermediary vectors, weight matrices, one-hot result vectore, error vectors, and error gradients in local machine, and initialize them. Then, it calls RunVectorKernel and MatrixMultiplyCUBLAS







